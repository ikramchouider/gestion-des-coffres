<?php

namespace App\Service;

use App\Entity\SecretCodeHistory;
use App\Repository\SecretCodeHistoryRepository;

class HistoryService
{
    public function __construct(
        private SecretCodeHistoryRepository $historyRepository
    ) {}

    /**
     * Finds all history entries matching a specific secret code
     * @param string $code The secret code to search for
     * @return array<SecretCodeHistory> Array of matching history entries (empty if no code provided)
     */
    public function searchByCode(string $code): array
    {
        $code = trim($code);
        
        return empty($code) ? [] : $this->historyRepository->findBy(
            ['secretCode' => $code],
            ['generatedAt' => 'DESC']
        );
    }

    /**
     * Finds all history entries generated by a specific user
     * @param int $userId The ID of the user to filter by
     * @return array<SecretCodeHistory> Array of user's history entries ordered by date
     */
    public function searchByUser(int $userId): array
    {
        return $this->historyRepository->findBy(
            ['generatedBy' => $userId],
            ['generatedAt' => 'DESC']
        );
    }

    /**
     * Converts a single history entry into an API-friendly array format
     * @param SecretCodeHistory $history The history entry to format
     * @return array Structured array containing history data with related entities
     */
    public function formatHistoryEntry(SecretCodeHistory $history): array
    {
        return [
            'id' => $history->getId(),
            'secretCode' => $history->getSecretCode(),
            'generatedAt' => $history->getGeneratedAt()?->format('c'),
            'coffre' => [
                'id' => $history->getCoffre()->getId(),
                'name' => $history->getCoffre()->getName(),
            ],
            'generatedBy' => [
                'id' => $history->getGeneratedBy()->getId(),
                'email' => $history->getGeneratedBy()->getEmail()
            ]
        ];
    }

    /**
     * Converts multiple history entries into API-friendly array format
     * @param array<SecretCodeHistory> $histories Array of history entries to format
     * @return array<array> Array of formatted history entries
     */
    public function formatHistoryEntries(array $histories): array
    {
        return array_map([$this, 'formatHistoryEntry'], $histories);
    }
}